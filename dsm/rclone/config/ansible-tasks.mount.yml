# code: language=ansible
---

- when:
    - config.conf is defined
  block:
  - name: config.mount|role config
    vars:
      # dsm cant fact package by ansible_distribution
      # and dsm cant install package
      rclone_packages: []
      # dsm cant fact man by ansible_distribution
      # and dsm man path like debian but no mandb command
      install_manpages: false
      rclone_man_pages:
        OWNER: root
        GROUP: root
        PATH: '/usr/share/man/man1'
      # user this to copy config
      rclone_config_location: "{{ config.dest }}"
      rclone_config_owner:
        OWNER: "{{ ansible_user_id }}"
        GROUP: users
      rclone_configs: "{{ config.conf }}"
    ansible.builtin.include_role:
      name: stefangweichinger.ansible_rclone

- when:
    - config.src is defined
  block:
  - name: config.mount|mkdir config
    become: true
    ansible.builtin.file:
      state: directory
      path: "{{ config.dest | dirname }}"

  - name: config.mount|copy config
    become: true
    vars:
      args:
        src: "{{ config.src }}"
        dest: "{{ config.dest }}"
    ansible.builtin.copy: "{{ args }}"
    register: config_copy
    until: config_copy is succeeded

- when:
    - config.mounts | default([],true) | length > 0
  block:
  - name: config.mount|mkdir mount
    become: true
    loop: "{{ config.mounts | default([],true) }}"
    ansible.builtin.file:
      state: directory
      path: "{{ item.point }}"

  - name: config.mount|append sysvinit script
    become: true
    loop: "{{ config.mounts | default([],true) }}"
    ansible.builtin.copy:
      dest: "/usr/local/etc/rc.d/rclone.{{ group_name | default('default',true) }}.{{ item.remote }}.sh"
      content: |
        #!/bin/sh -e

        # fix miss fuse3 https://forum.rclone.org/t/synology-update-to-dsm-7-fuse3-fatal-error/38411
        if [[ ! -f /bin/fusermount3 ]]; then
          ln -s /bin/fusermount /bin/fusermount3
        fi

        {% for env in item.env | default({},true) | dict2items %}
        export {{ env.key }}={{ env.value }}
        {% endfor %}

        rclone \
          mount {{ item.remote }}:{{ item.path | default('',true) }} {{ item.point }} \
          --config={{ config.dest }} \
          {{ item.flags | default('',true) }}
    register: sysvinit_append

  - name: config.mount|set executable permissions
    become: true
    loop: "{{ config.mounts | default([],true) }}"
    ansible.builtin.file:
      path: "/usr/local/etc/rc.d/rclone.{{ group_name | default('default',true) }}.{{ item.remote }}.sh"
      mode: 0755
      owner: root

  - name: config.mount|shell mount
    become: true
    loop: "{{ config.mounts | default([],true) }}"
    ansible.builtin.shell: |
      nohup /usr/local/etc/rc.d/rclone.{{ group_name | default('default',true) }}.{{ item.remote }}.sh \
        > rclone.{{ group_name | default('default',true) }}.{{ item.item.remote }}.out 2>&1 &
    register: mount_sh
    ignore_errors: true

  - name: config.mount|print mount
    vars:
      dsm_hostvars: "{{ hostvars | dict2items
        | selectattr('key','in',ansible_play_hosts)
        | selectattr('value.mount_sh','defined') }}"
    ansible.builtin.pause:
      seconds: 1
      prompt: |
        {% for host in dsm_hostvars %}

        [{{ host.key }}] =>
        --------------------------------------------------
        {{ host.value.mount_sh.stdout | default('',true) }}
        {{ host.value.mount_sh.stderr | default('',true) }}
        {% endfor %}
