# code: language=ansible
---

- name: stat current db
  ansible.builtin.stat:
    path: "{{ db_file }}"
  register: db_current_stat
  failed_when: not db_current_stat.stat.exists

- name: slurp current db
  ansible.builtin.slurp:
    src: "{{ db_file }}"
  register: db_current_read

- name: fact current var
  vars:
    current: "{{ db_current_read.content | b64decode | from_json }}"
  ansible.builtin.set_fact:
    _db_file:
      file: "{{ db_current_read.source }}"
      current: "{{ current }}"

- name: fact change attr
  vars:
    attr_current:
      disk_compatbility_info: |
        {
          "{{ item.model }}": {
            "{{ item.firmware }}": {
                "compatibility_interval": [
                    {
                        "barebone_installable": true,
                        "compatibility": "support",
                        "fw_dsm_update_status_notify": false,
                        "not_yet_rolling_status": "support",
                        "smart_attr_ignore": false,
                        "smart_test_ignore": false
                    }
                ]
            },
            "default": {
                "compatibility_interval": [
                    {
                        "barebone_installable": true,
                        "compatibility": "support",
                        "fw_dsm_update_status_notify": false,
                        "not_yet_rolling_status": "support",
                        "smart_attr_ignore": false,
                        "smart_test_ignore": false
                    }
                ]
            }
          }
        }
    attr_db_file:
      change: "{{ _db_file.current | combine(attr_current | default({},true), recursive=True) }}"
  loop: "{{ _nvme_info | default([],true) }}"
  when: _db_file.current.disk_compatbility_info.keys() is not contains(item.model)
  ansible.builtin.set_fact:
    _db_file: "{{ _db_file | combine(attr_db_file | default({},true), recursive=True) }}"

- when: _db_file.change is defined
  block:
  - name: stat original db
    ansible.builtin.stat:
      path: "{{ _db_file.file }}.original"
    register: lib_original_stat

  - name: backup original db
    become: true
    when: not lib_original_stat.stat.exists
    ansible.builtin.copy:
      remote_src: true
      src: "{{ _db_file.file }}"
      dest: "{{ _db_file.file }}.original"

  - name: write change db
    become: true
    ansible.builtin.copy:
      content: "{{ _db_file.change | to_json }}"
      dest: "{{ _db_file.file }}.support-nvme.json"
    register: db_file_write

  - name: replace change db
    become: true
    ansible.builtin.copy:
      remote_src: true
      src: "{{ db_file_write.dest }}"
      dest: "{{ _db_file.file }}"
    register: db_file_replace
