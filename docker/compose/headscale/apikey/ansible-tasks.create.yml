# code: language=ansible
---

- rescue:
  - name: headscale-apikey.create|rescue|fail
    when:
      - apikey is defined
    ansible.builtin.fail:
      msg: "create apikey fail. exclude param eval."

  block:
  - name: headscale-apikey.create|assert param
    ansible.builtin.assert:
      that:
        - apikey is defined
      msg: "var eval fail 'apikey'"
      quiet: true

  - name: headscale-apikey.create|fact param
    ansible.builtin.set_fact:
      _apikey: "{{ apikey }}"

  - name: headscale-apikey.create|wait container
    include_tasks: "{{ workspace.local }}/{{ workspace.seedpath }}/ansible-tasks/seed-docker/docker-container.wait.yml"
    vars:
      container:
        name: headscale
        until:
          - container_info.exists
        retries: 60
        delay: 60

  - name: headscale-apikey.create|exec container
    include_tasks: "{{ workspace.local }}/{{ workspace.seedpath }}/ansible-tasks/seed-docker/docker-container.exec.yml"
    vars:
      container:
        container: headscale
        command: "headscale apikey create"
        register: container_exec

  - name: headscale-apikey.create|append list
    when: list | type_debug == 'list'
    vars:
      append:
        index: "{{ _apikey.index }}"
        key: "{{ container_exec.stdout_lines[-1] }}"
      list: "{{ lookup('ansible.builtin.vars', _apikey.append) }}"
    ansible.builtin.set_fact:
      "{{ _apikey.append }}": "{{ list + [append] }}"

  - name: headscale-apikey.create|append dict
    when: dict | type_debug == 'dict'
    vars:
      dict: "{{ lookup('ansible.builtin.vars', _apikey.append) }}"
    ansible.builtin.set_fact:
      "{{ _apikey.append }}": "{{ dict | combine({_apikey.index: container_exec.stdout_lines[-1]}) }}"

  - name: headscale-apikey.create|print exec
    vars:
      docker_hostvars: "{{ hostvars | dict2items
        | selectattr('key','in',groups['docker'])
        | selectattr('value.container_exec','defined') }}"
    ansible.builtin.pause:
      seconds: 1
      prompt: |
        {% for host in docker_hostvars %}

        [{{ host.key }}] =>
        --------------------------------------------------
        {{ host.value.container_exec.stdout | default('',true) }}
        {{ host.value.container_exec.stderr | default('',true) }}
        {% endfor %}
